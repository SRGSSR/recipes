<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>CategoryName</key>
		<string>Ersatzvariablen</string>
		<key>items</key>
		<array>
			<dict>
				<key>title</key>
				<string>${resourcesFolderName}</string>
				<key>heading</key>
				<string>${resourcesFolderName}</string>
				<key>description</key>
				<string>Eine Ersatzvariable für den Ressourcenordner des Dokuments. Referenzieren Sie mit dieser Variablen Dokumente, die über die Ressourcenbibliothek hinzugefügt wurden.&lt;br&gt;&lt;br&gt;Wenn Sie beispielsweise mit der Ressourcenbibliothek Ihrem Dokument jquery-1.8.2.min.js hinzugefügt haben, wird mit dieser Zeile jQuery 1.8.2 in Ihr Hype-Dokument importiert. Dies ermöglicht Ihnen, jQuery bei der Vorschau Ihres Hype-Dokuments zu verwenden:&lt;div class=&quot;constants&quot;&gt;&lt;script src=&quot;${resourcesFolderName}/jquery-1.8.2.min.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;</string>
				<key>moreInfoUrlPath</key>
				<string>resources/#referencing</string>
			</dict>
		</array>
	</dict>
	<dict>
		<key>CategoryName</key>
		<string>Dokument</string>
		<key>items</key>
		<array>
			<dict>
				<key>title</key>
				<string>hypeDocument.documentName()</string>
				<key>heading</key>
				<string>hypeDocument.documentName()</string>
				<key>description</key>
				<string>Gibt den Namen des Dokuments zurück. Dieser Wert kann im globalen Code HYPE.documents[documentName] verwendet werden.</string>
				<key>moreInfoUrlPath</key>
				<string>#documentName</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.documentId()</string>
				<key>heading</key>
				<string>hypeDocument.documentId()</string>
				<key>description</key>
				<string>Gibt die ID des Containerbereichs für das Dokument zurück. Mit diesem Wert kann mit document.getElementId() das eigentliche Containerelement abgerufen werden.</string>
				<key>moreInfoUrlPath</key>
				<string>#documentId</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.resourcesFolderURL()</string>
				<key>heading</key>
				<string>hypeDocument.resourcesFolderURL()</string>
				<key>description</key>
				<string>Gibt den Zeichenfolgenwert für die Ressourcenordner-URL des Dokuments zurück. Referenzieren Sie hiermit Ressourcen, die über die Ressourcenbibliothek hinzugefügt wurden.</string>
				<key>moreInfoUrlPath</key>
				<string>#resourcesFolderURL</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.functions()</string>
				<key>heading</key>
				<string>hypeDocument.functions()</string>
				<key>description</key>
				<string>Gibt einen Array aller benutzerdefinierten JavaScript-Funktionen im Tumult Hype-Dokument zurück.</string>
				<key>moreInfoUrlPath</key>
				<string>#functions</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.getElementById()</string>
				<key>heading</key>
				<string>hypeDocument.getElementById(id)</string>
				<key>description</key>
				<string>Durchsucht das aktuelle Dokument nach der festgelegten ID (eingegeben im Feld „Eindeutige Element-ID“ der Identitätsinformationen) und gibt das DOM-HTML-Element zurück. Dies ähnelt dem typischen document.getElementById, aber stattdessen sollte die API-Version verwendet werden, weil Tumult Hype IDs im Falle von Konflikten unter Umständen neu zuweist.</string>
				<key>codeInsertion</key>
				<string>hypeDocument.getElementById(&apos;id&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#getElementById</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.getElementProperty()</string>
				<key>heading</key>
				<string>hypeDocument.getElementProperty(element, propertyName)</string>
				<key>description</key>
				<string>Ruft eine Eigenschaft eines Elements basierend auf den Kenntnissen der Hype-Laufzeit ab. &lt;br&gt;&lt;br&gt;Das Elementargument muss ein DOM-Element sein, normalerweise mit der Funktion hypeDocument.getElementById() abgerufen. &lt;br&gt;&lt;br&gt;Gültige Eigenschaftsnamen (Anführungszeichen erforderlich): &lt;div class=&apos;constants&apos;&gt;&apos;top&apos;&lt;br&gt;&apos;left&apos;&lt;br&gt;&apos;width&apos;&lt;br&gt;&apos;height&apos;&lt;br&gt;&apos;rotateZ&apos;&lt;br&gt;&apos;scaleX&apos;&lt;br&gt;&apos;scaleY&apos;&lt;br&gt;&apos;opacity&apos;&lt;br&gt;&apos;z-index&apos;&lt;br&gt;&apos;background-image&apos;&lt;/div&gt;</string>
				<key>codeInsertion</key>
				<string>hypeDocument.getElementProperty(element, &apos;propertyName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#getElementProperty</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.setElementProperty()</string>
				<key>heading</key>
				<string>hypeDocument.setElementProperty(element, propertyName, value, optionalDuration, optionalTimingFunctionName)</string>
				<key>description</key>
				<string>Legt eine Eigenschaft eines Elements auf eine Weise fest, die mit der Hype-Laufzeit kompatibel ist. Wenn die optionale Dauer angegeben wird, führt sie eine Übergangsanimation vom aktuellen Wert zum festgelegten Wert aus. &lt;br&gt;&lt;br&gt;Das Elementargument muss ein DOM-Element sein, normalerweise mit der Funktion hypeDocument.getElementById() abgerufen. &lt;br&gt;&lt;br&gt;Gültige Eigenschaftsnamen (Anführungszeichen erforderlich): &lt;div class=&apos;constants&apos;&gt;&apos;top&apos;&lt;br&gt;&apos;left&apos;&lt;br&gt;&apos;width&apos;&lt;br&gt;&apos;height&apos;&lt;br&gt;&apos;rotateZ&apos;&lt;br&gt;&apos;scaleX&apos;&lt;br&gt;&apos;scaleY&apos;&lt;br&gt;&apos;opacity&apos;&lt;br&gt;&apos;z-index&apos;&lt;br&gt;&apos;background-image&apos;&lt;/div&gt;Die optionale Dauer wird in Sekunden angegeben; der Standardwert ist 0.&lt;br&gt;&lt;br&gt;Wird kein Wert für die Funktion zur optionalen zeitlichen Steuerung angewendet, wird der Standard &apos;easeinout&apos; verwendet. Gültige Namen für die Funktion zur zeitlichen Steuerung (Anführungszeichen erforderlich): &lt;div class=&apos;constants&apos;&gt;&apos;easeinout&apos;&lt;br&gt;&apos;easein&apos;&lt;br&gt;&apos;easeout&apos;&lt;br&gt;&apos;linear&apos;&lt;/div&gt;</string>
				<key>codeInsertion</key>
				<string>hypeDocument.setElementProperty(element, &apos;propertyName&apos;, value, 1.0, &apos;easeinout&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#setElementProperty</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.relayoutIfNecessary()</string>
				<key>heading</key>
				<string>hypeDocument.relayoutIfNecessary()</string>
				<key>description</key>
				<string>Weist das Dokument explizit an, bei der Verwendung eines flexiblen Layouts das Layout auf alle Elemente und Gruppen der aktuellen Szene erneut anzuwenden.  Sollten Sie verwenden, wenn Sie die Begrenzungsgröße des Hauptcontainers extern geändert haben.</string>
				<key>moreInfoUrlPath</key>
				<string>#relayoutIfNecessary</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.triggerCustomBehaviorNamed()</string>
				<key>heading</key>
				<string>hypeDocument.triggerCustomBehaviorNamed(customBehaviorName)</string>
				<key>description</key>
				<string>Teilt Elementen, die ein eigenes Verhalten mit einem Namen (customBeviorName) haben, mit, ihre Aktionen auszuführen.</string>
				<key>codeInsertion</key>
				<string>hypeDocument.triggerCustomBehaviorNamed(&apos;customBehaviorName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#triggerCustomBehaviorNamed</string>
				<key>proOnly</key>
				<true/>
			</dict>
		</array>
	</dict>
	<dict>
		<key>CategoryName</key>
		<string>Szenen</string>
		<key>items</key>
		<array>
			<dict>
				<key>title</key>
				<string>hypeDocument.sceneNames()</string>
				<key>heading</key>
				<string>hypeDocument.sceneNames()</string>
				<key>description</key>
				<string>Gibt eine Liste aller im Dokument enthaltenen Szenen zurück. Hinweis: Die Eindeutigkeit von Szenenamen wird nicht erzwungen, weil sie in der Szenenauswahlschnittstelle festgelegt werden. Wenn Sie die Funktion showSceneNamed() verwenden, stellen Sie auf alle Fälle sicher, dass Szenen nicht den gleichen Namen haben.</string>
				<key>moreInfoUrlPath</key>
				<string>#sceneNames</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.currentSceneName()</string>
				<key>heading</key>
				<string>hypeDocument.currentSceneName()</string>
				<key>description</key>
				<string>Gibt den Zeichenfolgenwert für die gegenwärtig eingeblendete Szene zurück.</string>
				<key>moreInfoUrlPath</key>
				<string>#currentSceneName</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.showSceneNamed()</string>
				<key>heading</key>
				<string>hypeDocument.showSceneNamed(sceneName, optionalTransition, optionalDuration)</string>
				<key>description</key>
				<string>Ändert die angegebene Szene. Wenn der optionale Übergang nicht angegeben ist, wird standardmäßig der unmittelbare Übergang verwendet. &lt;br&gt;&lt;br&gt;Gültige Übergangskonstanten:	&lt;div class=&quot;constants&quot;&gt;hypeDocument.kSceneTransitionInstant&lt;br&gt;hypeDocument.kSceneTransitionCrossfade&lt;br&gt;hypeDocument.kSceneTransitionSwap&lt;br&gt;hypeDocument.kSceneTransitionPushLeftToRight&lt;br&gt;hypeDocument.kSceneTransitionPushRightToLeft&lt;br&gt;hypeDocument.kSceneTransitionPushBottomToTop&lt;br&gt;hypeDocument.kSceneTransitionPushTopToBottom&lt;br&gt;&lt;br&gt;Die optionale Dauer wird in Sekunden angegeben; der Standardwert ist 1,1.</string>
				<key>codeInsertion</key>
				<string>hypeDocument.showSceneNamed(&apos;sceneName&apos;, hypeDocument.kSceneTransitionCrossfade, 1.1)</string>
				<key>moreInfoUrlPath</key>
				<string>#showSceneNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.showNextScene()</string>
				<key>heading</key>
				<string>hypeDocument.showNextScene(optionalTransition, optionalDuration)</string>
				<key>description</key>
				<string>Blendet die nächste Szene basierend auf der Reihenfolge in der Szenenauswahlschnittstelle ein. Wenn der optionale Übergang nicht angegeben ist, wird standardmäßig der unmittelbare Übergang verwendet. &lt;br&gt;&lt;br&gt;Gültige Übergangskonstanten:	&lt;div class=&quot;constants&quot;&gt;hypeDocument.kSceneTransitionInstant&lt;br&gt;hypeDocument.kSceneTransitionCrossfade&lt;br&gt;hypeDocument.kSceneTransitionSwap&lt;br&gt;hypeDocument.kSceneTransitionPushLeftToRight&lt;br&gt;hypeDocument.kSceneTransitionPushRightToLeft&lt;br&gt;hypeDocument.kSceneTransitionPushBottomToTop&lt;br&gt;hypeDocument.kSceneTransitionPushTopToBottom&lt;br&gt;&lt;br&gt;Die optionale Dauer wird in Sekunden angegeben; der Standardwert ist 1,1.</string>
				<key>codeInsertion</key>
				<string>hypeDocument.showNextScene(hypeDocument.kSceneTransitionCrossfade, 1.1)</string>
				<key>moreInfoUrlPath</key>
				<string>#showNextScene</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.showPreviousScene()</string>
				<key>heading</key>
				<string>hypeDocument.showPreviousScene(optionalTransition, optionalDuration)</string>
				<key>description</key>
				<string>Blendet die vorherige Szene basierend auf der Reihenfolge in der Szenenauswahlschnittstelle ein. Wenn der optionale Übergang nicht angegeben ist, wird standardmäßig der unmittelbare Übergang verwendet. &lt;br&gt;&lt;br&gt;Gültige Übergangskonstanten:	&lt;div class=&quot;constants&quot;&gt;hypeDocument.kSceneTransitionInstant&lt;br&gt;hypeDocument.kSceneTransitionCrossfade&lt;br&gt;hypeDocument.kSceneTransitionSwap&lt;br&gt;hypeDocument.kSceneTransitionPushLeftToRight&lt;br&gt;hypeDocument.kSceneTransitionPushRightToLeft&lt;br&gt;hypeDocument.kSceneTransitionPushBottomToTop&lt;br&gt;hypeDocument.kSceneTransitionPushTopToBottom&lt;br&gt;&lt;br&gt;Die optionale Dauer wird in Sekunden angegeben; der Standardwert ist 1,1.</string>
				<key>codeInsertion</key>
				<string>hypeDocument.showPreviousScene(hypeDocument.kSceneTransitionCrossfade, 1.1)</string>
				<key>moreInfoUrlPath</key>
				<string>#showPreviousScene</string>
			</dict>
		</array>
	</dict>
	<dict>
		<key>CategoryName</key>
		<string>Layouts</string>
		<key>items</key>
		<array>
			<dict>
				<key>codeInsertion</key>
				<string>hypeDocument.layoutsForSceneNamed(&apos;sceneName&apos;)</string>
				<key>title</key>
				<string>hypeDocument.layoutsForSceneNamed()</string>
				<key>heading</key>
				<string>hypeDocument.layoutsForSceneNamed(sceneName)</string>
				<key>description</key>
				<string>Gibt eine Liste der Layoutinformationen für die jeweilige Szene zurück. Layoutinformationen werden als Objekt mit folgenden Schlüsseln bereitgestellt:&lt;div class=&apos;constants&apos;&gt;&apos;name&apos;&lt;br&gt;&apos;breakpoint&apos;&lt;br&gt;&apos;width&apos;&lt;br&gt;&apos;height&apos;</string>
				<key>moreInfoUrlPath</key>
				<string>#hypeDocument.layoutsForSceneNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.currentLayoutName()</string>
				<key>heading</key>
				<string>hypeDocument.currentLayoutName()</string>
				<key>description</key>
				<string>Gibt den Zeichenfolgenwert für den Namen des gegenwärtig angezeigten Layouts zurück.</string>
				<key>moreInfoUrlPath</key>
				<string>#hypeDocument.currentLayoutName</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.showLayoutNamed()</string>
				<key>heading</key>
				<string>hypeDocument.showLayoutNamed(layoutName)</string>
				<key>description</key>
				<string>Wechselt sofort zum festgelegten Layout in der aktuellen Szene. Das Layout wechselt unter Umständen zurück bei einem Resize-Ereignis, bei einer Szenenänderung oder beim Aufruf von relayoutIfNecessary().&lt;br&gt;&lt;br&gt;Verwenden Sie zum Erzwingen bestimmter Layouts die HYPE_eventListeners-Infrastruktur, um auf „HypeLayoutRequest“-Ereignisse zu lauschen und einen anderen Layoutnamen aus dem Rückruf zurückzugeben.</string>
				<key>codeInsertion</key>
				<string>hypeDocument.showLayoutNamed(&apos;layoutName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#hypeDocument.showLayoutNamed</string>
			</dict>
		</array>
		<key>proOnly</key>
		<true/>
	</dict>
	<dict>
		<key>CategoryName</key>
		<string>Zeitachsen</string>
		<key>items</key>
		<array>
			<dict>
				<key>title</key>
				<string>hypeDocument.startTimelineNamed()</string>
				<key>heading</key>
				<string>hypeDocument.startTimelineNamed(timelineName, direction)</string>
				<key>description</key>
				<string>Startet die angegebene Zeitachse für die aktuelle Szene am Anfang. Hinweis: Zeitachsen sind benutzerdefiniert; die Eindeutigkeit wird nicht erzwungen. Wenn Sie diese Funktion verwenden, stellen Sie auf alle Fälle sicher, dass Zeitachsen in einer Szene nicht den gleichen Namen haben.&lt;br&gt;&lt;br&gt;Richtung für Wiedergabe der Zeitachse:	&lt;div class=&quot;constants&quot;&gt;hypeDocument.kDirectionForward&lt;br&gt;hypeDocument.kDirectionReverse</string>
				<key>codeInsertion</key>
				<string>hypeDocument.startTimelineNamed(&apos;timelineName&apos;, hypeDocument.kDirectionForward)</string>
				<key>moreInfoUrlPath</key>
				<string>#startTimelineNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.pauseTimelineNamed()</string>
				<key>heading</key>
				<string>hypeDocument.pauseTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>Hält die angegebene Zeitachse für die aktuelle Szene an. Hinweis: Zeitachsen sind benutzerdefiniert; die Eindeutigkeit wird nicht erzwungen. Wenn Sie diese Funktion verwenden, stellen Sie auf alle Fälle sicher, dass Zeitachsen in einer Szene nicht den gleichen Namen haben.</string>
				<key>codeInsertion</key>
				<string>hypeDocument.pauseTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#pauseTimelineNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.continueTimelineNamed()</string>
				<key>heading</key>
				<string>hypeDocument.continueTimelineNamed(timelineName, direction, canRestartTimeline)</string>
				<key>description</key>
				<string>Setzt die angegebene Zeitachse für die aktuelle Szene an der Stelle fort, wo sie angehalten wurde. Hinweis: Zeitachsen sind benutzerdefiniert; die Eindeutigkeit wird nicht erzwungen. Wenn Sie diese Funktion verwenden, stellen Sie auf alle Fälle sicher, dass Zeitachsen in einer Szene nicht den gleichen Namen haben.&lt;br&gt;&lt;br&gt;Weiter startet die Zeitachse standardmäßig nicht von vorn, wenn sie am Ende ist. Um dieses Verhalten zu ändern, legen Sie canRestartTimeline (kann Zeitachse neu starten) als wahr fest.&lt;br&gt;&lt;br&gt;Abspielrichtung der Zeitachse:	&lt;div class=&apos;constants&apos;&gt;hypeDocument.kDirectionForward&lt;br&gt;hypeDocument.kDirectionReverse</string>
				<key>codeInsertion</key>
				<string>hypeDocument.continueTimelineNamed(&apos;timelineName&apos;, hypeDocument.kDirectionForward, false)</string>
				<key>moreInfoUrlPath</key>
				<string>#continueTimelineNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.goToTimeInTimelineNamed()</string>
				<key>heading</key>
				<string>hypeDocument.goToTimeInTimelineNamed(timeInSeconds, timelineName)</string>
				<key>description</key>
				<string>Springt für die aktuelle Szene zu einem bestimmten Zeitpunkt in der angegebenen Zeitachse. Hinweis: Zeitachsen sind benutzerdefiniert; die Eindeutigkeit wird nicht erzwungen. Wenn Sie diese Funktion verwenden, stellen Sie auf alle Fälle sicher, dass Zeitachsen in einer Szene nicht den gleichen Namen haben.</string>
				<key>codeInsertion</key>
				<string>hypeDocument.goToTimeInTimelineNamed(0, &apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#goToTimeInTimelineNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.currentTimeInTimelineNamed()</string>
				<key>heading</key>
				<string>hypeDocument.currentTimeInTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>Gibt den aktuellen Zeitpunkt der angegebenen Zeitachse in Sekunden zurück.</string>
				<key>codeInsertion</key>
				<string>hypeDocument.currentTimeInTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#currentTimeInTimelineNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.durationForTimelineNamed()</string>
				<key>heading</key>
				<string>hypeDocument.durationForTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>Gibt die Dauer der angegebenen Zeitachse in Sekunden zurück.</string>
				<key>codeInsertion</key>
				<string>hypeDocument.durationForTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#durationForTimelineNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.currentDirectionForTimelineNamed()</string>
				<key>heading</key>
				<string>hypeDocument.currentDirectionForTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>Gibt die Wiedergaberichtung der angegebenen Zeitachse zurück.
&lt;br&gt;&lt;br&gt;Mögliche Rückgabewerte:	&lt;div class=&quot;constants&quot;&gt;hypeDocument.kDirectionForward&lt;br&gt;hypeDocument.kDirectionReverse</string>
				<key>codeInsertion</key>
				<string>hypeDocument.currentDirectionForTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#currentDirectionForTimelineNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.isPlayingTimelineNamed()</string>
				<key>heading</key>
				<string>hypeDocument.isPlayingTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>Gibt „wahr“ zurück, wenn die Zeitachse abgespielt wird, und gibt „falsch“ zurück, wenn sie nicht abgespielt wird.</string>
				<key>codeInsertion</key>
				<string>hypeDocument.isPlayingTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#isPlayingTimelineNamed</string>
			</dict>
		</array>
	</dict>
	<dict>
		<key>CategoryName</key>
		<string>Symbole</string>
		<key>items</key>
		<array>
			<dict>
				<key>title</key>
				<string>hypeDocument.getSymbolInstanceById()</string>
				<key>heading</key>
				<string>hypeDocument.getSymbolInstanceById(id)</string>
				<key>description</key>
				<string>Gibt die Symbolinstanz für das angegebene Element zurück.&lt;br&gt;&lt;br&gt;Mit der Symbolinstanz können Zeitachsen im Symbol gesteuert werden. Im Abschnitt „Symbolinstanzen“ finden Sie weitere Informationen.</string>
				<key>codeInsertion</key>
				<string>hypeDocument.getSymbolInstanceById(&apos;id&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#getSymbolInstanceById</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.getSymbolInstancesByName()</string>
				<key>heading</key>
				<string>hypeDocument.getSymbolInstancesByName(symbolName)</string>
				<key>description</key>
				<string>Gibt alle Symbolinstanzen mit dem angegebenen Namen zurück. Den Namen eines Symbols finden Sie in der Symbolbibliothek.&lt;br&gt;&lt;br&gt;Mit der Symbolinstanz können Zeitachsen im Symbol gesteuert werden. Im Abschnitt „Symbolinstanzen“ finden Sie weitere Informationen.</string>
				<key>codeInsertion</key>
				<string>hypeDocument.getSymbolInstancesByName(&apos;symbolName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#getSymbolInstancesByName</string>
			</dict>
		</array>
		<key>proOnly</key>
		<true/>
	</dict>
	<dict>
		<key>CategoryName</key>
		<string>Symbolinstanzen</string>
		<key>items</key>
		<array>
			<dict>
				<key>title</key>
				<string>symbolInstance.getSymbolInstancesByName()</string>
				<key>heading</key>
				<string>symbolInstance.getSymbolInstancesByName(symbolName)</string>
				<key>description</key>
				<string>Gibt alle Symbolinstanzen mit dem angegebenen Namen zurück, die untergeordnete Elemente von symbolInstance.element() sind. Den Namen eines Symbols finden Sie in der Symbolbibliothek.</string>
				<key>codeInsertion</key>
				<string>symbolInstance.getSymbolInstancesByName(&apos;symbolName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#getSymbolInstancesByNameSymbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.symbolName()</string>
				<key>heading</key>
				<string>symbolInstance.symbolName()</string>
				<key>description</key>
				<string>Gibt den Namen des Symbols zurück.</string>
				<key>moreInfoUrlPath</key>
				<string>#symbolName</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.element()</string>
				<key>heading</key>
				<string>symbolInstance.element()</string>
				<key>description</key>
				<string>Gibt das Element zurück, das das Symbol darstellt.</string>
				<key>moreInfoUrlPath</key>
				<string>#element-symbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.startTimelineNamed()</string>
				<key>heading</key>
				<string>symbolInstance.startTimelineNamed(timelineName, direction)</string>
				<key>description</key>
				<string>Startet die angegebene Zeitachse für das Symbol am Anfang. Hinweis: Zeitachsen sind benutzerdefiniert; die Eindeutigkeit wird nicht erzwungen. Wenn Sie diese Funktion verwenden, stellen Sie auf alle Fälle sicher, dass Zeitachsen im Symbol nicht den gleichen Namen haben.&lt;br&gt;&lt;br&gt;Richtung für Wiedergabe der Zeitachse:	&lt;div class=&quot;constants&quot;&gt;hypeDocument.kDirectionForward&lt;br&gt;hypeDocument.kDirectionReverse</string>
				<key>codeInsertion</key>
				<string>symbolInstance.startTimelineNamed(&apos;timelineName&apos;, hypeDocument.kDirectionForward)</string>
				<key>moreInfoUrlPath</key>
				<string>#startTimelineNamedSymbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.pauseTimelineNamed()</string>
				<key>heading</key>
				<string>symbolInstance.pauseTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>Hält die angegebene Zeitachse für das Symbol an. Hinweis: Zeitachsen sind benutzerdefiniert; die Eindeutigkeit wird nicht erzwungen. Wenn Sie diese Funktion verwenden, stellen Sie auf alle Fälle sicher, dass Zeitachsen im Symbol nicht den gleichen Namen haben.</string>
				<key>codeInsertion</key>
				<string>symbolInstance.pauseTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#pauseTimelineNamedSymbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.continueTimelineNamed()</string>
				<key>heading</key>
				<string>symbolInstance.continueTimelineNamed(timelineName, direction, canRestartTimeline)</string>
				<key>description</key>
				<string>Setzt die angegebene Zeitachse für das Symbol an der Stelle fort, wo sie angehalten wurde. Hinweis: Zeitachsen sind benutzerdefiniert; die Eindeutigkeit wird nicht erzwungen. Wenn Sie diese Funktion verwenden, stellen Sie auf alle Fälle sicher, dass Zeitachsen im Symbol nicht den gleichen Namen haben.&lt;br&gt;&lt;br&gt;Weiter startet die Zeitachse standardmäßig nicht von vorn, wenn sie am Ende ist. Um dieses Verhalten zu ändern, legen Sie canRestartTimeline (kann Zeitachse neu starten) als wahr fest.&lt;br&gt;&lt;br&gt;Abspielrichtung der Zeitachse:	&lt;div class=&apos;constants&apos;&gt;hypeDocument.kDirectionForward&lt;br&gt;hypeDocument.kDirectionReverse</string>
				<key>codeInsertion</key>
				<string>symbolInstance.continueTimelineNamed(&apos;timelineName&apos;, hypeDocument.kDirectionForward, false)</string>
				<key>moreInfoUrlPath</key>
				<string>#continueTimelineNamedSymbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.goToTimeInTimelineNamed()</string>
				<key>heading</key>
				<string>symbolInstance.goToTimeInTimelineNamed(timeInSeconds, timelineName)</string>
				<key>description</key>
				<string>Springt für das Symbol zu einem bestimmten Zeitpunkt in der angegebenen Zeitachse. Hinweis: Zeitachsen sind benutzerdefiniert; die Eindeutigkeit wird nicht erzwungen. Wenn Sie diese Funktion verwenden, stellen Sie auf alle Fälle sicher, dass Zeitachsen im Symbol nicht den gleichen Namen haben.</string>
				<key>codeInsertion</key>
				<string>symbolInstance.goToTimeInTimelineNamed(0, &apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#goToTimeInTimelineNamedSymbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.currentTimeInTimelineNamed()</string>
				<key>heading</key>
				<string>symbolInstance.currentTimeInTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>Gibt den aktuellen Zeitpunkt der angegebenen Zeitachse in Sekunden zurück.</string>
				<key>codeInsertion</key>
				<string>symbolInstance.currentTimeInTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#currentTimeInTimelineNamedSymbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.durationForTimelineNamed()</string>
				<key>heading</key>
				<string>symbolInstance.durationForTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>Gibt die Dauer der angegebenen Zeitachse in Sekunden zurück.</string>
				<key>codeInsertion</key>
				<string>symbolInstance.durationForTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#durationForTimelineNamedSymbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.currentDirectionForTimelineNamed()</string>
				<key>heading</key>
				<string>symbolInstance.currentDirectionForTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>Gibt die Wiedergaberichtung der angegebenen Zeitachse zurück.
&lt;br&gt;&lt;br&gt;Mögliche Rückgabewerte:	&lt;div class=&quot;constants&quot;&gt;hypeDocument.kDirectionForward&lt;br&gt;hypeDocument.kDirectionReverse</string>
				<key>codeInsertion</key>
				<string>symbolInstance.currentDirectionForTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#currentDirectionForTimelineNamedSymbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.isPlayingTimelineNamed()</string>
				<key>heading</key>
				<string>symbolInstance.isPlayingTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>Gibt „wahr“ zurück, wenn die Zeitachse abgespielt wird, und gibt „falsch“ zurück, wenn sie nicht abgespielt wird.</string>
				<key>codeInsertion</key>
				<string>symbolInstance.isPlayingTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#isPlayingTimelineNamedSymbol</string>
			</dict>
		</array>
		<key>proOnly</key>
		<true/>
	</dict>
	<dict>
		<key>CategoryName</key>
		<string>Ziehen-Ereignisse</string>
		<key>items</key>
		<array>
			<dict>
				<key>title</key>
				<string>event[&apos;hypeGesturePhase&apos;]</string>
				<key>heading</key>
				<string>event[&apos;hypeGesturePhase&apos;]</string>
				<key>description</key>
				<string>Beim Empfang eines Rückrufs für das Ereignis „Bei Ziehen“ mit der Aktion „JavaScript ausführen …“ meldet das Ereignisobjekt auch, ob die aktuelle Ziehgeste gerade begonnen oder geendet hat, abgebrochen wurde oder die Koordinaten aktualisiert wurden. Um diesen Zustand abzurufen, greifen Sie im Ereignisobjekt auf die Eigenschaft hypeGesturePhase zu:
&lt;div class=&quot;constants&quot;&gt;hypeDocument.kHypeGesturePhaseStart&lt;br&gt;hypeDocument.kHypeGesturePhaseMove&lt;br&gt;hypeDocument.kHypeGesturePhaseEnd&lt;br&gt;hypeDocument.kHypeGesturePhaseCancel&lt;/div&gt;</string>
				<key>moreInfoUrlPath</key>
				<string>#hypegesturephase</string>
			</dict>
			<dict>
				<key>title</key>
				<string>event[&apos;hypeGestureXPosition&apos;]</string>
				<key>heading</key>
				<string>event[&apos;hypeGestureXPosition&apos;]</string>
				<key>description</key>
				<string>Gibt die aktuelle x-Position eines Ziehvorgangs zurück, wenn das Ereignis „Bei Ziehen“ mit der Aktion „JavaScript ausführen …“ verwendet wird.</string>
				<key>moreInfoUrlPath</key>
				<string>#hypegesturexposition</string>
			</dict>
			<dict>
				<key>title</key>
				<string>event[&apos;hypeGestureYPosition&apos;]</string>
				<key>heading</key>
				<string>event[&apos;hypeGestureYPosition&apos;]</string>
				<key>description</key>
				<string>Gibt die aktuelle y-Position eines Ziehvorgangs zurück, wenn das Ereignis „Bei Ziehen“ mit der Aktion „JavaScript ausführen …“ verwendet wird.</string>
				<key>moreInfoUrlPath</key>
				<string>#hypegestureyposition</string>
			</dict>
		</array>
	</dict>
</array>
</plist>
