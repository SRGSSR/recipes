<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>CategoryName</key>
		<string>Substitution Variables</string>
		<key>items</key>
		<array>
			<dict>
				<key>title</key>
				<string>${resourcesFolderName}</string>
				<key>heading</key>
				<string>${resourcesFolderName}</string>
				<key>description</key>
				<string>A substitution variable for the document&apos;s resources folder. Use this to reference documents added via the Resource Library.&lt;br&gt;&lt;br&gt;For example, if you’ve added jquery-1.8.2.min.js to your document using the Resource Library, this one line will import jQuery 1.8.2 into your Hype document, allowing you to use jQuery when previewing your Hype document:&lt;div class=&quot;constants&quot;&gt;&amp;lt;script src=&quot;${resourcesFolderName}/jquery-1.8.2.min.js&quot;&gt;&amp;lt;/script&gt;&lt;/div&gt;</string>
				<key>moreInfoUrlPath</key>
				<string>resources/#referencing</string>
			</dict>
		</array>
	</dict>
	<dict>
		<key>CategoryName</key>
		<string>Document</string>
		<key>items</key>
		<array>
			<dict>
				<key>title</key>
				<string>hypeDocument.documentName()</string>
				<key>heading</key>
				<string>hypeDocument.documentName()</string>
				<key>description</key>
				<string>Returns the name of the document. This value can be used in the global HYPE.documents[documentName].</string>
				<key>moreInfoUrlPath</key>
				<string>#documentName</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.documentId()</string>
				<key>heading</key>
				<string>hypeDocument.documentId()</string>
				<key>description</key>
				<string>Returns the id of the container div for the document. This value can be used with document.getElementId() to retrieve the container element itself.</string>
				<key>moreInfoUrlPath</key>
				<string>#documentId</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.resourcesFolderURL()</string>
				<key>heading</key>
				<string>hypeDocument.resourcesFolderURL()</string>
				<key>description</key>
				<string>Returns the string value for the the document’s resources folder URL. Use this to reference assets added via the Resource Library.</string>
				<key>moreInfoUrlPath</key>
				<string>#resourcesFolderURL</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.functions()</string>
				<key>heading</key>
				<string>hypeDocument.functions()</string>
				<key>description</key>
				<string>Returns an array of all user-defined JavaScript functions in the Tumult Hype Document.</string>
				<key>moreInfoUrlPath</key>
				<string>#functions</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.getElementById()</string>
				<key>heading</key>
				<string>hypeDocument.getElementById(id)</string>
				<key>description</key>
				<string>Searches the current document for the specified id (entered through the Identity inspector&apos;s &quot;Unique Element ID&quot;) and returns the DOM HTML Element. This is similar to the typical &apos;document.getElementById&apos;, however the API version should be used instead as Tumult Hype may reassign ids in cases of collision.</string>
				<key>codeInsertion</key>
				<string>hypeDocument.getElementById(&apos;id&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#getElementById</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.getElementProperty()</string>
				<key>heading</key>
				<string>hypeDocument.getElementProperty(element, propertyName)</string>
				<key>description</key>
				<string>Gets a property of an element based on the Hype runtime&apos;s knowledge.  &lt;br&gt;&lt;br&gt;The element argument must be a DOM element, generally obtained by the hypeDocument.getElementById() function. &lt;br&gt;&lt;br&gt;Valid property names (quotes required): &lt;div class=&apos;constants&apos;&gt;&apos;top&apos;&lt;br&gt;&apos;left&apos;&lt;br&gt;&apos;width&apos;&lt;br&gt;&apos;height&apos;&lt;br&gt;&apos;rotateZ&apos;&lt;br&gt;&apos;scaleX&apos;&lt;br&gt;&apos;scaleY&apos;&lt;br&gt;&apos;opacity&apos;&lt;br&gt;&apos;z-index&apos;&lt;br&gt;&apos;background-image&apos;&lt;/div&gt;</string>
				<key>codeInsertion</key>
				<string>hypeDocument.getElementProperty(element, &apos;propertyName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#getElementProperty</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.setElementProperty()</string>
				<key>heading</key>
				<string>hypeDocument.setElementProperty(element, propertyName, value, optionalDuration, optionalTimingFunctionName)</string>
				<key>description</key>
				<string>Sets a property of an element in a manner compatible with the Hype runtime.  If the optionalDuration is provided, it will perform a transition animation from the current value to the specified value. &lt;br&gt;&lt;br&gt;The element argument must be a DOM element, generally obtained by the hypeDocument.getElementById() function. &lt;br&gt;&lt;br&gt;Valid property names (quotes required): &lt;div class=&apos;constants&apos;&gt;&apos;top&apos;&lt;br&gt;&apos;left&apos;&lt;br&gt;&apos;width&apos;&lt;br&gt;&apos;height&apos;&lt;br&gt;&apos;rotateZ&apos;&lt;br&gt;&apos;scaleX&apos;&lt;br&gt;&apos;scaleY&apos;&lt;br&gt;&apos;opacity&apos;&lt;br&gt;&apos;z-index&apos;&lt;br&gt;&apos;background-image&apos;&lt;/div&gt;optionalDuration is given in seconds; the default value is 0.&lt;br&gt;&lt;br&gt;optionalTimingFunction will default to &apos;easeinout&apos; if not provided. Valid timing function names (quotes required): &lt;div class=&apos;constants&apos;&gt;&apos;easeinout&apos;&lt;br&gt;&apos;easein&apos;&lt;br&gt;&apos;easeout&apos;&lt;br&gt;&apos;linear&apos;&lt;/div&gt;</string>
				<key>codeInsertion</key>
				<string>hypeDocument.setElementProperty(element, &apos;propertyName&apos;, value, 1.0, &apos;easeinout&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#setElementProperty</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.relayoutIfNecessary()</string>
				<key>heading</key>
				<string>hypeDocument.relayoutIfNecessary()</string>
				<key>description</key>
				<string>Explicitly tells the document to relayout all elements and groups for the current scene when using a flexible layout.  Use if you have externally changed the bounding size of the main container.</string>
				<key>moreInfoUrlPath</key>
				<string>#relayoutIfNecessary</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.triggerCustomBehaviorNamed()</string>
				<key>heading</key>
				<string>hypeDocument.triggerCustomBehaviorNamed(customBehaviorName)</string>
				<key>description</key>
				<string>Informs any elements which have a custom behavior with customBehaviorName to run its actions.</string>
				<key>codeInsertion</key>
				<string>hypeDocument.triggerCustomBehaviorNamed(&apos;customBehaviorName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#triggerCustomBehaviorNamed</string>
				<key>proOnly</key>
				<true/>
			</dict>
		</array>
	</dict>
	<dict>
		<key>CategoryName</key>
		<string>Scenes</string>
		<key>items</key>
		<array>
			<dict>
				<key>title</key>
				<string>hypeDocument.sceneNames()</string>
				<key>heading</key>
				<string>hypeDocument.sceneNames()</string>
				<key>description</key>
				<string>Returns a list of all scenes in the document. Note: scene names are not enforced to be unique as they are specified by in the scene selector interface. If you are going to use the showSceneNamed() function, be sure that no two scenes have the same name!</string>
				<key>moreInfoUrlPath</key>
				<string>#sceneNames</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.currentSceneName()</string>
				<key>heading</key>
				<string>hypeDocument.currentSceneName()</string>
				<key>description</key>
				<string>Returns the string value for the currently shown scene.</string>
				<key>moreInfoUrlPath</key>
				<string>#currentSceneName</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.showSceneNamed()</string>
				<key>heading</key>
				<string>hypeDocument.showSceneNamed(sceneName, optionalTransition, optionalDuration)</string>
				<key>description</key>
				<string>Changes to the specified scene. If the optionalTransition is not specified it will default to the instant transition. &lt;br&gt;&lt;br&gt;Valid transition constants:	&lt;div class=&quot;constants&quot;&gt;hypeDocument.kSceneTransitionInstant&lt;br&gt;hypeDocument.kSceneTransitionCrossfade&lt;br&gt;hypeDocument.kSceneTransitionSwap&lt;br&gt;hypeDocument.kSceneTransitionPushLeftToRight&lt;br&gt;hypeDocument.kSceneTransitionPushRightToLeft&lt;br&gt;hypeDocument.kSceneTransitionPushBottomToTop&lt;br&gt;hypeDocument.kSceneTransitionPushTopToBottom&lt;br&gt;&lt;br&gt;optionalDuration is given in seconds; the default value is 1.1.</string>
				<key>codeInsertion</key>
				<string>hypeDocument.showSceneNamed(&apos;sceneName&apos;, hypeDocument.kSceneTransitionCrossfade, 1.1)</string>
				<key>moreInfoUrlPath</key>
				<string>#showSceneNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.showNextScene()</string>
				<key>heading</key>
				<string>hypeDocument.showNextScene(optionalTransition, optionalDuration)</string>
				<key>description</key>
				<string>Shows the next scene, based on the order in the scene selector interface. If the optionalTransition is not specified it will default to the instant transition. &lt;br&gt;&lt;br&gt;Valid transition constants:	&lt;div class=&quot;constants&quot;&gt;hypeDocument.kSceneTransitionInstant&lt;br&gt;hypeDocument.kSceneTransitionCrossfade&lt;br&gt;hypeDocument.kSceneTransitionSwap&lt;br&gt;hypeDocument.kSceneTransitionPushLeftToRight&lt;br&gt;hypeDocument.kSceneTransitionPushRightToLeft&lt;br&gt;hypeDocument.kSceneTransitionPushBottomToTop&lt;br&gt;hypeDocument.kSceneTransitionPushTopToBottom&lt;br&gt;&lt;br&gt;optionalDuration is given in seconds; the default value is 1.1.</string>
				<key>codeInsertion</key>
				<string>hypeDocument.showNextScene(hypeDocument.kSceneTransitionCrossfade, 1.1)</string>
				<key>moreInfoUrlPath</key>
				<string>#showNextScene</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.showPreviousScene()</string>
				<key>heading</key>
				<string>hypeDocument.showPreviousScene(optionalTransition, optionalDuration)</string>
				<key>description</key>
				<string>Shows the previous scene, based on the order in the scene selector interface. If the optionalTransition is not specified it will default to the instant transition. &lt;br&gt;&lt;br&gt;Valid transition constants:	&lt;div class=&quot;constants&quot;&gt;hypeDocument.kSceneTransitionInstant&lt;br&gt;hypeDocument.kSceneTransitionCrossfade&lt;br&gt;hypeDocument.kSceneTransitionSwap&lt;br&gt;hypeDocument.kSceneTransitionPushLeftToRight&lt;br&gt;hypeDocument.kSceneTransitionPushRightToLeft&lt;br&gt;hypeDocument.kSceneTransitionPushBottomToTop&lt;br&gt;hypeDocument.kSceneTransitionPushTopToBottom&lt;br&gt;&lt;br&gt;optionalDuration is given in seconds; the default value is 1.1.</string>
				<key>codeInsertion</key>
				<string>hypeDocument.showPreviousScene(hypeDocument.kSceneTransitionCrossfade, 1.1)</string>
				<key>moreInfoUrlPath</key>
				<string>#showPreviousScene</string>
			</dict>
		</array>
	</dict>
	<dict>
		<key>CategoryName</key>
		<string>Layouts</string>
		<key>items</key>
		<array>
			<dict>
				<key>codeInsertion</key>
				<string>hypeDocument.layoutsForSceneNamed(&apos;sceneName&apos;)</string>
				<key>title</key>
				<string>hypeDocument.layoutsForSceneNamed()</string>
				<key>heading</key>
				<string>hypeDocument.layoutsForSceneNamed(sceneName)</string>
				<key>description</key>
				<string>Returns a list of layout info for the given scene. Layout info is given as an object with the following keys:&lt;div class=&apos;constants&apos;&gt;&apos;name&apos;&lt;br&gt;&apos;breakpoint&apos;&lt;br&gt;&apos;width&apos;&lt;br&gt;&apos;height&apos;</string>
				<key>moreInfoUrlPath</key>
				<string>#hypeDocument.layoutsForSceneNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.currentLayoutName()</string>
				<key>heading</key>
				<string>hypeDocument.currentLayoutName()</string>
				<key>description</key>
				<string>Returns the string value for the name of the currently shown layout.</string>
				<key>moreInfoUrlPath</key>
				<string>#hypeDocument.currentLayoutName</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.showLayoutNamed()</string>
				<key>heading</key>
				<string>hypeDocument.showLayoutNamed(layoutName)</string>
				<key>description</key>
				<string>Changes instantly to the specified layout in the current scene. The layout may change back on a resize event, scene change, or relayoutIfNecessary() call.&lt;br&gt;&lt;br&gt;In order to force specific layouts, use the HYPE_eventListeners infrastructure to listen to "HypeLayoutRequest" events and return a different layout name from the callback.</string>
				<key>codeInsertion</key>
				<string>hypeDocument.showLayoutNamed(&apos;layoutName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#hypeDocument.showLayoutNamed</string>
			</dict>
		</array>
		<key>proOnly</key>
		<true/>
	</dict>
	<dict>
		<key>CategoryName</key>
		<string>Timelines</string>
		<key>items</key>
		<array>
			<dict>
				<key>title</key>
				<string>hypeDocument.startTimelineNamed()</string>
				<key>heading</key>
				<string>hypeDocument.startTimelineNamed(timelineName, direction)</string>
				<key>description</key>
				<string>Starts the specified timeline at the beginning for the current scene. Note: timelines are user-defined, so they are not enforced to be unique. If you are going to use this function, be sure that no two timelines in any scene have the same name!&lt;br&gt;&lt;br&gt;Direction to play timeline:	&lt;div class=&quot;constants&quot;&gt;hypeDocument.kDirectionForward&lt;br&gt;hypeDocument.kDirectionReverse</string>
				<key>codeInsertion</key>
				<string>hypeDocument.startTimelineNamed(&apos;timelineName&apos;, hypeDocument.kDirectionForward)</string>
				<key>moreInfoUrlPath</key>
				<string>#startTimelineNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.pauseTimelineNamed()</string>
				<key>heading</key>
				<string>hypeDocument.pauseTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>Pauses the specified timeline for the current scene. Note: timelines are user-defined, so they are not enforced to be unique. If you are going to use this function, be sure that no two timelines in any scene have the same name!</string>
				<key>codeInsertion</key>
				<string>hypeDocument.pauseTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#pauseTimelineNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.continueTimelineNamed()</string>
				<key>heading</key>
				<string>hypeDocument.continueTimelineNamed(timelineName, direction, canRestartTimeline)</string>
				<key>description</key>
				<string>Continues the specified timeline where it left off for the current scene. Note: timelines are user-defined, so they are not enforced to be unique. If you are going to use this function, be sure that no two timelines in any scene have the same name!&lt;br&gt;&lt;br&gt;By default continue will not start the timeline over if it is at the end, to change this behavior pass true for canRestartTimeline.&lt;br&gt;&lt;br&gt;Direction to play timeline:	&lt;div class=&quot;constants&quot;&gt;hypeDocument.kDirectionForward&lt;br&gt;hypeDocument.kDirectionReverse</string>
				<key>codeInsertion</key>
				<string>hypeDocument.continueTimelineNamed(&apos;timelineName&apos;, hypeDocument.kDirectionForward, false)</string>
				<key>moreInfoUrlPath</key>
				<string>#continueTimelineNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.goToTimeInTimelineNamed()</string>
				<key>heading</key>
				<string>hypeDocument.goToTimeInTimelineNamed(timeInSeconds, timelineName)</string>
				<key>description</key>
				<string>Jumps to a specific time in the specified timeline for the current scene. Note: timelines are user-defined, so they are not enforced to be unique. If you are going to use this function, be sure that no two timelines in any scene have the same name!</string>
				<key>codeInsertion</key>
				<string>hypeDocument.goToTimeInTimelineNamed(0, &apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#goToTimeInTimelineNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.currentTimeInTimelineNamed()</string>
				<key>heading</key>
				<string>hypeDocument.currentTimeInTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>Returns the current time of the specified timeline in seconds.</string>
				<key>codeInsertion</key>
				<string>hypeDocument.currentTimeInTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#currentTimeInTimelineNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.durationForTimelineNamed()</string>
				<key>heading</key>
				<string>hypeDocument.durationForTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>Returns the duration of the specified timeline in seconds.</string>
				<key>codeInsertion</key>
				<string>hypeDocument.durationForTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#durationForTimelineNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.currentDirectionForTimelineNamed()</string>
				<key>heading</key>
				<string>hypeDocument.currentDirectionForTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>Returns the playback direction of the specified timeline.
&lt;br&gt;&lt;br&gt;Possible return values:	&lt;div class=&quot;constants&quot;&gt;hypeDocument.kDirectionForward&lt;br&gt;hypeDocument.kDirectionReverse</string>
				<key>codeInsertion</key>
				<string>hypeDocument.currentDirectionForTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#currentDirectionForTimelineNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.isPlayingTimelineNamed()</string>
				<key>heading</key>
				<string>hypeDocument.isPlayingTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>Returns true if the timeline is playing and false if it is not.</string>
				<key>codeInsertion</key>
				<string>hypeDocument.isPlayingTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#isPlayingTimelineNamed</string>
			</dict>
		</array>
	</dict>
	<dict>
		<key>CategoryName</key>
		<string>Symbols</string>
		<key>items</key>
		<array>
			<dict>
				<key>title</key>
				<string>hypeDocument.getSymbolInstanceById()</string>
				<key>heading</key>
				<string>hypeDocument.getSymbolInstanceById(id)</string>
				<key>description</key>
				<string>Returns the symbolInstance for the symbol with the specified id.&lt;br&gt;&lt;br&gt;The symbol instance can be used to control timelines in the symbol. See the Symbol Instances section for more information.</string>
				<key>codeInsertion</key>
				<string>hypeDocument.getSymbolInstanceById(&apos;id&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#getSymbolInstanceById</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.getSymbolInstancesByName()</string>
				<key>heading</key>
				<string>hypeDocument.getSymbolInstancesByName(symbolName)</string>
				<key>description</key>
				<string>Returns all symbolInstances with the specified name. A symbol&apos;s name can be found in the Symbol Library.&lt;br&gt;&lt;br&gt;The symbol instance can be used to control timelines in the symbol. See the Symbol Instances section for more information.</string>
				<key>codeInsertion</key>
				<string>hypeDocument.getSymbolInstancesByName(&apos;symbolName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#getSymbolInstancesByName</string>
			</dict>
		</array>
		<key>proOnly</key>
		<true/>
	</dict>
	<dict>
		<key>CategoryName</key>
		<string>Symbol Instances</string>
		<key>items</key>
		<array>
			<dict>
				<key>title</key>
				<string>symbolInstance.getSymbolInstancesByName()</string>
				<key>heading</key>
				<string>symbolInstance.getSymbolInstancesByName(symbolName)</string>
				<key>description</key>
				<string>Returns all symbolInstances with the specified name that are children of symbolInstance.element(). A symbol&apos;s name can be found in the Symbol Library.</string>
				<key>codeInsertion</key>
				<string>symbolInstance.getSymbolInstancesByName(&apos;symbolName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#getSymbolInstancesByNameSymbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.symbolName()</string>
				<key>heading</key>
				<string>symbolInstance.symbolName()</string>
				<key>description</key>
				<string>Returns the name of the symbol.</string>
				<key>moreInfoUrlPath</key>
				<string>#symbolName</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.element()</string>
				<key>heading</key>
				<string>symbolInstance.element()</string>
				<key>description</key>
				<string>Returns the element representing the symbol.</string>
				<key>moreInfoUrlPath</key>
				<string>#element-symbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.startTimelineNamed()</string>
				<key>heading</key>
				<string>symbolInstance.startTimelineNamed(timelineName, direction)</string>
				<key>description</key>
				<string>Starts the specified timeline at the beginning for the symbol. Note: timelines are user-defined, so they are not enforced to be unique. If you are going to use this function, be sure that no two timelines in the symbol have the same name!&lt;br&gt;&lt;br&gt;Direction to play timeline:	&lt;div class=&quot;constants&quot;&gt;hypeDocument.kDirectionForward&lt;br&gt;hypeDocument.kDirectionReverse</string>
				<key>codeInsertion</key>
				<string>symbolInstance.startTimelineNamed(&apos;timelineName&apos;, hypeDocument.kDirectionForward)</string>
				<key>moreInfoUrlPath</key>
				<string>#startTimelineNamedSymbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.pauseTimelineNamed()</string>
				<key>heading</key>
				<string>symbolInstance.pauseTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>Pauses the specified timeline for the symbol. Note: timelines are user-defined, so they are not enforced to be unique. If you are going to use this function, be sure that no two timelines in the symbol have the same name!</string>
				<key>codeInsertion</key>
				<string>symbolInstance.pauseTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#pauseTimelineNamedSymbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.continueTimelineNamed()</string>
				<key>heading</key>
				<string>symbolInstance.continueTimelineNamed(timelineName, direction, canRestartTimeline)</string>
				<key>description</key>
				<string>Continues the specified timeline where it left off for the symbol. Note: timelines are user-defined, so they are not enforced to be unique. If you are going to use this function, be sure that no two timelines in the symbol have the same name!&lt;br&gt;&lt;br&gt;By default continue will not start the timeline over if it is at the end, to change this behavior pass true for canRestartTimeline.&lt;br&gt;&lt;br&gt;Direction to play timeline:	&lt;div class=&quot;constants&quot;&gt;hypeDocument.kDirectionForward&lt;br&gt;hypeDocument.kDirectionReverse</string>
				<key>codeInsertion</key>
				<string>symbolInstance.continueTimelineNamed(&apos;timelineName&apos;, hypeDocument.kDirectionForward, false)</string>
				<key>moreInfoUrlPath</key>
				<string>#continueTimelineNamedSymbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.goToTimeInTimelineNamed()</string>
				<key>heading</key>
				<string>symbolInstance.goToTimeInTimelineNamed(timeInSeconds, timelineName)</string>
				<key>description</key>
				<string>Jumps to a specific time in the specified timeline for the symbol. Note: timelines are user-defined, so they are not enforced to be unique. If you are going to use this function, be sure that no two timelines in the symbol have the same name!</string>
				<key>codeInsertion</key>
				<string>symbolInstance.goToTimeInTimelineNamed(0, &apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#goToTimeInTimelineNamedSymbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.currentTimeInTimelineNamed()</string>
				<key>heading</key>
				<string>symbolInstance.currentTimeInTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>Returns the current time of the specified timeline in seconds.</string>
				<key>codeInsertion</key>
				<string>symbolInstance.currentTimeInTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#currentTimeInTimelineNamedSymbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.durationForTimelineNamed()</string>
				<key>heading</key>
				<string>symbolInstance.durationForTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>Returns the duration of the specified timeline in seconds.</string>
				<key>codeInsertion</key>
				<string>symbolInstance.durationForTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#durationForTimelineNamedSymbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.currentDirectionForTimelineNamed()</string>
				<key>heading</key>
				<string>symbolInstance.currentDirectionForTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>Returns the playback direction of the specified timeline.
&lt;br&gt;&lt;br&gt;Possible return values:	&lt;div class=&quot;constants&quot;&gt;hypeDocument.kDirectionForward&lt;br&gt;hypeDocument.kDirectionReverse</string>
				<key>codeInsertion</key>
				<string>symbolInstance.currentDirectionForTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#currentDirectionForTimelineNamedSymbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.isPlayingTimelineNamed()</string>
				<key>heading</key>
				<string>symbolInstance.isPlayingTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>Returns true if the timeline is playing and false if it is not.</string>
				<key>codeInsertion</key>
				<string>symbolInstance.isPlayingTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#isPlayingTimelineNamedSymbol</string>
			</dict>
		</array>
		<key>proOnly</key>
		<true/>
	</dict>
	<dict>
		<key>CategoryName</key>
		<string>Drag Events</string>
		<key>items</key>
		<array>
			<dict>
				<key>title</key>
				<string>event[&apos;hypeGesturePhase&apos;]</string>
				<key>heading</key>
				<string>event[&apos;hypeGesturePhase&apos;]</string>
				<key>description</key>
				<string>When receiving a callback for the &quot;On Drag&quot; event with the &quot;Run JavaScript…&quot; action the event object also offers information about whether the current drag gesture has just started or ended, was canceled, or the coordinates were updated. To get that state, access the hypeGesturePhase property in the event object:
&lt;div class=&quot;constants&quot;&gt;hypeDocument.kHypeGesturePhaseStart&lt;br&gt;hypeDocument.kHypeGesturePhaseMove&lt;br&gt;hypeDocument.kHypeGesturePhaseEnd&lt;br&gt;hypeDocument.kHypeGesturePhaseCancel&lt;/div&gt;</string>
				<key>moreInfoUrlPath</key>
				<string>#hypegesturephase</string>
			</dict>
			<dict>
				<key>title</key>
				<string>event[&apos;hypeGestureXPosition&apos;]</string>
				<key>heading</key>
				<string>event[&apos;hypeGestureXPosition&apos;]</string>
				<key>description</key>
				<string>Returns the current x position of a drag when using the &quot;On Drag&quot; event with the &quot;Run JavaScript…&quot; action.</string>
				<key>moreInfoUrlPath</key>
				<string>#hypegesturexposition</string>
			</dict>
			<dict>
				<key>title</key>
				<string>event[&apos;hypeGestureYPosition&apos;]</string>
				<key>heading</key>
				<string>event[&apos;hypeGestureYPosition&apos;]</string>
				<key>description</key>
				<string>Returns the current y position of a drag when using the &quot;On Drag&quot; event with the &quot;Run JavaScript…&quot; action.</string>
				<key>moreInfoUrlPath</key>
				<string>#hypegestureyposition</string>
			</dict>
		</array>
	</dict>
</array>
</plist>
