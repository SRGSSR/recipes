<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>CategoryName</key>
		<string>替换变量</string>
		<key>items</key>
		<array>
			<dict>
				<key>title</key>
				<string>${resourcesFolderName}</string>
				<key>heading</key>
				<string>${resourcesFolderName}</string>
				<key>description</key>
				<string>文稿资源文件夹的替换变量。使用此变量引用通过资源库添加的文稿。&lt;br&gt;&lt;br&gt;例如，如果已使用资源库将 jquery-1.8.2.min.js 添加至您的文稿，该行会将 jQuery 1.8.2 导入您的 Hype 文稿，让您在预览 Hype 文稿时可以使用 jQuery：&lt;div class=&quot;constants&quot;&gt;&lt;script src=&quot;${resourcesFolderName}/jquery-1.8.2.min.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;</string>
				<key>moreInfoUrlPath</key>
				<string>resources/#referencing</string>
			</dict>
		</array>
	</dict>
	<dict>
		<key>CategoryName</key>
		<string>文稿</string>
		<key>items</key>
		<array>
			<dict>
				<key>title</key>
				<string>hypeDocument.documentName()</string>
				<key>heading</key>
				<string>hypeDocument.documentName()</string>
				<key>description</key>
				<string>返回文稿名称。该值可用于全局 HYPE.documents[documentName] 中。</string>
				<key>moreInfoUrlPath</key>
				<string>#documentName</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.documentId()</string>
				<key>heading</key>
				<string>hypeDocument.documentId()</string>
				<key>description</key>
				<string>返回文稿的容器 DIV ID。该值可用于 document.getElementId() 以检索容器元素本身。</string>
				<key>moreInfoUrlPath</key>
				<string>#documentId</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.resourcesFolderURL()</string>
				<key>heading</key>
				<string>hypeDocument.resourcesFolderURL()</string>
				<key>description</key>
				<string>返回文稿资源文件夹 URL 的字符串数值。使用该值引用通过资源库添加的资产。</string>
				<key>moreInfoUrlPath</key>
				<string>#resourcesFolderURL</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.functions()</string>
				<key>heading</key>
				<string>hypeDocument.functions()</string>
				<key>description</key>
				<string>返回 Tumult Hype 文稿中所有用户定义的 JavaScript 函数的阵列。</string>
				<key>moreInfoUrlPath</key>
				<string>#functions</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.getElementById()</string>
				<key>heading</key>
				<string>hypeDocument.getElementById(id)</string>
				<key>description</key>
				<string>搜索通过身份检查器“唯一的元素 ID”所输入的指定 ID 的当前文稿，并返回 DOM HTML 元素。这与典型的“document.getElementById”类似，但是应使用 API 版本，因为 Tumult Hype 遇到冲突时可能重新分配 ID。</string>
				<key>codeInsertion</key>
				<string>hypeDocument.getElementById(&apos;id&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#getElementById</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.getElementProperty()</string>
				<key>heading</key>
				<string>hypeDocument.getElementProperty(element, propertyName)</string>
				<key>description</key>
				<string>根据 Hype 运行时的知识，获得某个元素的属性。&lt;br&gt;&lt;br&gt;元素参数必须是 DOM 元素，通常这是通过 hypeDocument.getElementById() 函数来获取的。&lt;br&gt;&lt;br&gt;有效的属性名称（需要引号）：&lt;div class=&apos;constants&apos;&gt;&apos;top&apos;&lt;br&gt;&apos;left&apos;&lt;br&gt;&apos;width&apos;&lt;br&gt;&apos;height&apos;&lt;br&gt;&apos;rotateZ&apos;&lt;br&gt;&apos;scaleX&apos;&lt;br&gt;&apos;scaleY&apos;&lt;br&gt;&apos;opacity&apos;&lt;br&gt;&apos;z-index&apos;&lt;br&gt;&apos;background-image&apos;&lt;/div&gt;</string>
				<key>codeInsertion</key>
				<string>hypeDocument.getElementProperty(element, &apos;propertyName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#getElementProperty</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.setElementProperty()</string>
				<key>heading</key>
				<string>hypeDocument.setElementProperty(element, propertyName, value, optionalDuration, optionalTimingFunctionName)</string>
				<key>description</key>
				<string>以兼容于 Hype 运行时的方式设置元素的属性。如果提供了 optionalDuration，则会执行过渡动画完成从当前值到指定值的过渡。&lt;br&gt;&lt;br&gt;元素参数必须是 DOM 元素，通常这是通过 hypeDocument.getElementById() 函数来获取的。&lt;br&gt;&lt;br&gt;有效的属性名称（需要引号）：&lt;div class=&apos;constants&apos;&gt;&apos;top&apos;&lt;br&gt;&apos;left&apos;&lt;br&gt;&apos;width&apos;&lt;br&gt;&apos;height&apos;&lt;br&gt;&apos;rotateZ&apos;&lt;br&gt;&apos;scaleX&apos;&lt;br&gt;&apos;scaleY&apos;&lt;br&gt;&apos;opacity&apos;&lt;br&gt;&apos;z-index&apos;&lt;br&gt;&apos;background-image&apos;&lt;/div&gt;optionalDuration 单位为秒；默认值为 0。&lt;br&gt;&lt;br&gt;如果没有提供，则 optionalTimingFunction 默认为 &apos;easeinout&apos;。有效的定时函数名称（需要引号）：&lt;div class=&apos;constants&apos;&gt;&apos;easeinout&apos;&lt;br&gt;&apos;easein&apos;&lt;br&gt;&apos;easeout&apos;&lt;br&gt;&apos;linear&apos;&lt;/div&gt;</string>
				<key>codeInsertion</key>
				<string>hypeDocument.setElementProperty(element, &apos;propertyName&apos;, value, 1.0, &apos;easeinout&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#setElementProperty</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.relayoutIfNecessary()</string>
				<key>heading</key>
				<string>hypeDocument.relayoutIfNecessary()</string>
				<key>description</key>
				<string>明确指示文稿在使用可调布局时重新布局当前场景的所有元素和组。如果已从外部更改主容器限定大小，则使用该值。</string>
				<key>moreInfoUrlPath</key>
				<string>#relayoutIfNecessary</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.triggerCustomBehaviorNamed()</string>
				<key>heading</key>
				<string>hypeDocument.triggerCustomBehaviorNamed(customBehaviorName)</string>
				<key>description</key>
				<string>通知有 customBehaviorName 自定行为的所有元素运行其操作。</string>
				<key>codeInsertion</key>
				<string>hypeDocument.triggerCustomBehaviorNamed(&apos;customBehaviorName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#triggerCustomBehaviorNamed</string>
				<key>proOnly</key>
				<true/>
			</dict>
		</array>
	</dict>
	<dict>
		<key>CategoryName</key>
		<string>场景</string>
		<key>items</key>
		<array>
			<dict>
				<key>title</key>
				<string>hypeDocument.sceneNames()</string>
				<key>heading</key>
				<string>hypeDocument.sceneNames()</string>
				<key>description</key>
				<string>返回文稿中所有场景的列表。备注：场景名称在场景选择器界面指定，因此不必是唯一的名称。如果将使用 showSceneNamed() 函数，请确保任何两个场景的名称都不相同！</string>
				<key>moreInfoUrlPath</key>
				<string>#sceneNames</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.currentSceneName()</string>
				<key>heading</key>
				<string>hypeDocument.currentSceneName()</string>
				<key>description</key>
				<string>返回当前所示场景的字符串值。</string>
				<key>moreInfoUrlPath</key>
				<string>#currentSceneName</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.showSceneNamed()</string>
				<key>heading</key>
				<string>hypeDocument.showSceneNamed(sceneName, optionalTransition, optionalDuration)</string>
				<key>description</key>
				<string>更改为指定场景。如果未指定 optionalTransition，将默认设置为即时转换。&lt;br&gt;&lt;br&gt;有效的转换常数：	&lt;div class=&quot;constants&quot;&gt;hypeDocument.kSceneTransitionInstant&lt;br&gt;hypeDocument.kSceneTransitionCrossfade&lt;br&gt;hypeDocument.kSceneTransitionSwap&lt;br&gt;hypeDocument.kSceneTransitionPushLeftToRight&lt;br&gt;hypeDocument.kSceneTransitionPushRightToLeft&lt;br&gt;hypeDocument.kSceneTransitionPushBottomToTop&lt;br&gt;hypeDocument.kSceneTransitionPushTopToBottom&lt;br&gt;&lt;br&gt;在数秒内提供 optionalDuration；默认值为 1.1。</string>
				<key>codeInsertion</key>
				<string>hypeDocument.showSceneNamed(&apos;sceneName&apos;, hypeDocument.kSceneTransitionCrossfade, 1.1)</string>
				<key>moreInfoUrlPath</key>
				<string>#showSceneNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.showNextScene()</string>
				<key>heading</key>
				<string>hypeDocument.showNextScene(optionalTransition, optionalDuration)</string>
				<key>description</key>
				<string>根据场景选择器界面中的顺序显示下一场景。如果未指定 optionalTransition，将默认设置为即时转换。&lt;br&gt;&lt;br&gt;有效的转换常数：	&lt;div class=&quot;constants&quot;&gt;hypeDocument.kSceneTransitionInstant&lt;br&gt;hypeDocument.kSceneTransitionCrossfade&lt;br&gt;hypeDocument.kSceneTransitionSwap&lt;br&gt;hypeDocument.kSceneTransitionPushLeftToRight&lt;br&gt;hypeDocument.kSceneTransitionPushRightToLeft&lt;br&gt;hypeDocument.kSceneTransitionPushBottomToTop&lt;br&gt;hypeDocument.kSceneTransitionPushTopToBottom&lt;br&gt;&lt;br&gt;在数秒内提供 optionalDuration；默认值为 1.1。</string>
				<key>codeInsertion</key>
				<string>hypeDocument.showNextScene(hypeDocument.kSceneTransitionCrossfade, 1.1)</string>
				<key>moreInfoUrlPath</key>
				<string>#showNextScene</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.showPreviousScene()</string>
				<key>heading</key>
				<string>hypeDocument.showPreviousScene(optionalTransition, optionalDuration)</string>
				<key>description</key>
				<string>根据场景选择器界面中的顺序显示上一场景。如果未指定 optionalTransition，将默认设置为即时转换。&lt;br&gt;&lt;br&gt;有效的转换常数：	&lt;div class=&quot;constants&quot;&gt;hypeDocument.kSceneTransitionInstant&lt;br&gt;hypeDocument.kSceneTransitionCrossfade&lt;br&gt;hypeDocument.kSceneTransitionSwap&lt;br&gt;hypeDocument.kSceneTransitionPushLeftToRight&lt;br&gt;hypeDocument.kSceneTransitionPushRightToLeft&lt;br&gt;hypeDocument.kSceneTransitionPushBottomToTop&lt;br&gt;hypeDocument.kSceneTransitionPushTopToBottom&lt;br&gt;&lt;br&gt;在数秒内提供 optionalDuration；默认值为 1.1。</string>
				<key>codeInsertion</key>
				<string>hypeDocument.showPreviousScene(hypeDocument.kSceneTransitionCrossfade, 1.1)</string>
				<key>moreInfoUrlPath</key>
				<string>#showPreviousScene</string>
			</dict>
		</array>
	</dict>
	<dict>
		<key>CategoryName</key>
		<string>布局</string>
		<key>items</key>
		<array>
			<dict>
				<key>codeInsertion</key>
				<string>hypeDocument.layoutsForSceneNamed(&apos;sceneName&apos;)</string>
				<key>title</key>
				<string>hypeDocument.layoutsForSceneNamed()</string>
				<key>heading</key>
				<string>hypeDocument.layoutsForSceneNamed(sceneName)</string>
				<key>description</key>
				<string>返回给定场景的布局信息列表。提供的布局信息为包含以下关键值的对象：&lt;div class=&apos;constants&apos;&gt;’name&apos;&lt;br&gt;&apos;breakpoint&apos;&lt;br&gt;&apos;width&apos;&lt;br&gt;&apos;height&apos;</string>
				<key>moreInfoUrlPath</key>
				<string>#hypeDocument.layoutsForSceneNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.currentLayoutName()</string>
				<key>heading</key>
				<string>hypeDocument.currentLayoutName()</string>
				<key>description</key>
				<string>返回当前显示布局的名称的字符串值。</string>
				<key>moreInfoUrlPath</key>
				<string>#hypeDocument.currentLayoutName</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.showLayoutNamed()</string>
				<key>heading</key>
				<string>hypeDocument.showLayoutNamed(layoutName)</string>
				<key>description</key>
				<string>立即更改当前场景中的指定布局。在发生大小调整事件、场景更改或 relayoutIfNecessary() 调用时，布局可能会改回。&lt;br&gt;&lt;br&gt;要强制使用特定的布局，请使用 HYPE_eventListeners 基础架构侦听 &quot;HypeLayoutRequest&quot; 事件并从回叫中返回不同的布局名称。</string>
				<key>codeInsertion</key>
				<string>hypeDocument.showLayoutNamed(&apos;layoutName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#hypeDocument.showLayoutNamed</string>
			</dict>
		</array>
		<key>proOnly</key>
		<true/>
	</dict>
	<dict>
		<key>CategoryName</key>
		<string>时间线</string>
		<key>items</key>
		<array>
			<dict>
				<key>title</key>
				<string>hypeDocument.startTimelineNamed()</string>
				<key>heading</key>
				<string>hypeDocument.startTimelineNamed(timelineName, direction)</string>
				<key>description</key>
				<string>从当前场景的开头开始指定的时间线。备注：时间线由用户定义，因此不必是唯一的。如果将使用该功能，请确保任何场景中两条时间线的名称各不相同！&lt;br&gt;&lt;br&gt;播放时间线的方向：	&lt;div class=&quot;constants&quot;&gt;hypeDocument.kDirectionForward&lt;br&gt;hypeDocument.kDirectionReverse</string>
				<key>codeInsertion</key>
				<string>hypeDocument.startTimelineNamed(&apos;timelineName&apos;, hypeDocument.kDirectionForward)</string>
				<key>moreInfoUrlPath</key>
				<string>#startTimelineNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.pauseTimelineNamed()</string>
				<key>heading</key>
				<string>hypeDocument.pauseTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>暂停当前场景的指定时间线。备注：时间线由用户定义，因此不必是唯一的。如果将使用该函数，请确保任何场景中任意两条时间线的名称都不相同！</string>
				<key>codeInsertion</key>
				<string>hypeDocument.pauseTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#pauseTimelineNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.continueTimelineNamed()</string>
				<key>heading</key>
				<string>hypeDocument.continueTimelineNamed(timelineName, direction, canRestartTimeline)</string>
				<key>description</key>
				<string>继续从停止之处播放当前场景的指定时间线。备注：时间线由用户定义，因此不必是唯一的。如果要使用该函数，请确保任何场景中都没有名称相同的两条时间线！&lt;br&gt;&lt;br&gt;默认情况下，继续将不会启动已经处在尽头的时间线，要更改这一行为方式，则向 canRestartTimeline 参数传递真值。&lt;br&gt;&lt;br&gt;播放时间线的方向：	&lt;div class=&quot;constants&quot;&gt;hypeDocument.kDirectionForward&lt;br&gt;hypeDocument.kDirectionReverse</string>
				<key>codeInsertion</key>
				<string>hypeDocument.continueTimelineNamed(&apos;timelineName&apos;, hypeDocument.kDirectionForward, false)</string>
				<key>moreInfoUrlPath</key>
				<string>#continueTimelineNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.goToTimeInTimelineNamed()</string>
				<key>heading</key>
				<string>hypeDocument.goToTimeInTimelineNamed(timeInSeconds, timelineName)</string>
				<key>description</key>
				<string>跳转至当前场景指定时间线中的特定时间。备注：时间线由用户定义，因此不必是唯一的。如果将使用该函数，请确保任何场景中任意两条时间线的名称都不相同！</string>
				<key>codeInsertion</key>
				<string>hypeDocument.goToTimeInTimelineNamed(0, &apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#goToTimeInTimelineNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.currentTimeInTimelineNamed()</string>
				<key>heading</key>
				<string>hypeDocument.currentTimeInTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>以秒为单位返回指定时间线的当前时间。</string>
				<key>codeInsertion</key>
				<string>hypeDocument.currentTimeInTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#currentTimeInTimelineNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.durationForTimelineNamed()</string>
				<key>heading</key>
				<string>hypeDocument.durationForTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>以秒为单位返回指定时间线的持续时间。</string>
				<key>codeInsertion</key>
				<string>hypeDocument.durationForTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#durationForTimelineNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.currentDirectionForTimelineNamed()</string>
				<key>heading</key>
				<string>hypeDocument.currentDirectionForTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>返回指定时间线的播放方向。
&lt;br&gt;&lt;br&gt;可能的返回值：	&lt;div class=&quot;constants&quot;&gt;hypeDocument.kDirectionForward&lt;br&gt;hypeDocument.kDirectionReverse</string>
				<key>codeInsertion</key>
				<string>hypeDocument.currentDirectionForTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#currentDirectionForTimelineNamed</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.isPlayingTimelineNamed()</string>
				<key>heading</key>
				<string>hypeDocument.isPlayingTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>如果时间线正在播放，返回真，如果没有，返回假。</string>
				<key>codeInsertion</key>
				<string>hypeDocument.isPlayingTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#isPlayingTimelineNamed</string>
			</dict>
		</array>
	</dict>
	<dict>
		<key>CategoryName</key>
		<string>符号</string>
		<key>items</key>
		<array>
			<dict>
				<key>title</key>
				<string>hypeDocument.getSymbolInstanceById()</string>
				<key>heading</key>
				<string>hypeDocument.getSymbolInstanceById(id)</string>
				<key>description</key>
				<string>返回指定元素的 symbolInstance。&lt;br&gt;&lt;br&gt;符号实例可用于控制符号中的时间线。查看“符号实例”部分了解更多信息。</string>
				<key>codeInsertion</key>
				<string>hypeDocument.getSymbolInstanceById(&apos;id&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#getSymbolInstanceById</string>
			</dict>
			<dict>
				<key>title</key>
				<string>hypeDocument.getSymbolInstancesByName()</string>
				<key>heading</key>
				<string>hypeDocument.getSymbolInstancesByName(symbolName)</string>
				<key>description</key>
				<string>返回具有指定名称的所有 symbolInstance。符号的名称可在符号库中找到。&lt;br&gt;&lt;br&gt;符号实例可用于控制符号中的时间线。查看“符号实例”部分了解更多信息。</string>
				<key>codeInsertion</key>
				<string>hypeDocument.getSymbolInstancesByName(&apos;symbolName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#getSymbolInstancesByName</string>
			</dict>
		</array>
		<key>proOnly</key>
		<true/>
	</dict>
	<dict>
		<key>CategoryName</key>
		<string>符号实例</string>
		<key>items</key>
		<array>
			<dict>
				<key>title</key>
				<string>symbolInstance.getSymbolInstancesByName()</string>
				<key>heading</key>
				<string>symbolInstance.getSymbolInstancesByName(symbolName)</string>
				<key>description</key>
				<string>如果 symbolInstance 的指定名称为 symbolInstance.element() 的子项，则返回所有这类 symbolInstance。符号的名称可在符号库中找到。</string>
				<key>codeInsertion</key>
				<string>symbolInstance.getSymbolInstancesByName(&apos;symbolName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#getSymbolInstancesByNameSymbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.symbolName()</string>
				<key>heading</key>
				<string>symbolInstance.symbolName()</string>
				<key>description</key>
				<string>返回符号名称。</string>
				<key>moreInfoUrlPath</key>
				<string>#symbolName</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.element()</string>
				<key>heading</key>
				<string>symbolInstance.element()</string>
				<key>description</key>
				<string>返回代表符号的元素。</string>
				<key>moreInfoUrlPath</key>
				<string>#element-symbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.startTimelineNamed()</string>
				<key>heading</key>
				<string>symbolInstance.startTimelineNamed(timelineName, direction)</string>
				<key>description</key>
				<string>从符号的开头开始指定的时间线。备注：时间线由用户定义，因此不必是唯一的。如果将使用该功能，请确保符号中两条时间线的名称各不相同！&lt;br&gt;&lt;br&gt;播放时间线的方向：	&lt;div class=&quot;constants&quot;&gt;hypeDocument.kDirectionForward&lt;br&gt;hypeDocument.kDirectionReverse</string>
				<key>codeInsertion</key>
				<string>symbolInstance.startTimelineNamed(&apos;timelineName&apos;, hypeDocument.kDirectionForward)</string>
				<key>moreInfoUrlPath</key>
				<string>#startTimelineNamedSymbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.pauseTimelineNamed()</string>
				<key>heading</key>
				<string>symbolInstance.pauseTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>暂停符号的指定时间线。备注：时间线由用户定义，因此不必是唯一的。如果将使用该函数，请确保符号中任意两条时间线的名称都不相同！</string>
				<key>codeInsertion</key>
				<string>symbolInstance.pauseTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#pauseTimelineNamedSymbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.continueTimelineNamed()</string>
				<key>heading</key>
				<string>symbolInstance.continueTimelineNamed(timelineName, direction, canRestartTimeline)</string>
				<key>description</key>
				<string>继续从停止之处播放符号的指定时间线。备注：时间线由用户定义，因此不必是唯一的。如果要使用该函数，请确保符号中没有名称相同的两条时间线！&lt;br&gt;&lt;br&gt;默认情况下，继续将不会启动已经处在尽头的时间线，要更改这一行为方式，则向 canRestartTimeline 参数传递真值。&lt;br&gt;&lt;br&gt;播放时间线的方向：	&lt;div class=&quot;constants&quot;&gt;hypeDocument.kDirectionForward&lt;br&gt;hypeDocument.kDirectionReverse</string>
				<key>codeInsertion</key>
				<string>symbolInstance.continueTimelineNamed(&apos;timelineName&apos;, hypeDocument.kDirectionForward, false)</string>
				<key>moreInfoUrlPath</key>
				<string>#continueTimelineNamedSymbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.goToTimeInTimelineNamed()</string>
				<key>heading</key>
				<string>symbolInstance.goToTimeInTimelineNamed(timeInSeconds, timelineName)</string>
				<key>description</key>
				<string>跳转至符号指定时间线中的特定时间。备注：时间线由用户定义，因此不必是唯一的。如果将使用该函数，请确保符号中任意两条时间线的名称都不相同！</string>
				<key>codeInsertion</key>
				<string>symbolInstance.goToTimeInTimelineNamed(0, &apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#goToTimeInTimelineNamedSymbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.currentTimeInTimelineNamed()</string>
				<key>heading</key>
				<string>symbolInstance.currentTimeInTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>以秒为单位返回指定时间线的当前时间。</string>
				<key>codeInsertion</key>
				<string>symbolInstance.currentTimeInTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#currentTimeInTimelineNamedSymbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.durationForTimelineNamed()</string>
				<key>heading</key>
				<string>symbolInstance.durationForTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>以秒为单位返回指定时间线的持续时间。</string>
				<key>codeInsertion</key>
				<string>symbolInstance.durationForTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#durationForTimelineNamedSymbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.currentDirectionForTimelineNamed()</string>
				<key>heading</key>
				<string>symbolInstance.currentDirectionForTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>返回指定时间线的播放方向。
&lt;br&gt;&lt;br&gt;可能的返回值：	&lt;div class=&quot;constants&quot;&gt;hypeDocument.kDirectionForward&lt;br&gt;hypeDocument.kDirectionReverse</string>
				<key>codeInsertion</key>
				<string>symbolInstance.currentDirectionForTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#currentDirectionForTimelineNamedSymbol</string>
			</dict>
			<dict>
				<key>title</key>
				<string>symbolInstance.isPlayingTimelineNamed()</string>
				<key>heading</key>
				<string>symbolInstance.isPlayingTimelineNamed(timelineName)</string>
				<key>description</key>
				<string>如果时间线正在播放，返回真，如果没有，返回假。</string>
				<key>codeInsertion</key>
				<string>symbolInstance.isPlayingTimelineNamed(&apos;timelineName&apos;)</string>
				<key>moreInfoUrlPath</key>
				<string>#isPlayingTimelineNamedSymbol</string>
			</dict>
		</array>
		<key>proOnly</key>
		<true/>
	</dict>
	<dict>
		<key>CategoryName</key>
		<string>拖移事件</string>
		<key>items</key>
		<array>
			<dict>
				<key>title</key>
				<string>event[&apos;hypeGesturePhase&apos;]</string>
				<key>heading</key>
				<string>event[&apos;hypeGesturePhase&apos;]</string>
				<key>description</key>
				<string>当收到具有“运行 JavaScript…”操作的“拖移时”事件回叫时，事件对象还会提供当前拖动手势的以下信息：刚开始或已结束、已取消，或更新坐标。要获取该状态，访问事件对象中的 hypeGesturePhase 属性：
&lt;div class=&quot;constants&quot;&gt;hypeDocument.kHypeGesturePhaseStart&lt;br&gt;hypeDocument.kHypeGesturePhaseMove&lt;br&gt;hypeDocument.kHypeGesturePhaseEnd&lt;br&gt;hypeDocument.kHypeGesturePhaseCancel&lt;/div&gt;</string>
				<key>moreInfoUrlPath</key>
				<string>#hypegesturephase</string>
			</dict>
			<dict>
				<key>title</key>
				<string>event[&apos;hypeGestureXPosition&apos;]</string>
				<key>heading</key>
				<string>event[&apos;hypeGestureXPosition&apos;]</string>
				<key>description</key>
				<string>当使用具有“运行 JavaScript…”操作的“拖移时”事件时，返回拖移的当前 x 位置。</string>
				<key>moreInfoUrlPath</key>
				<string>#hypegesturexposition</string>
			</dict>
			<dict>
				<key>title</key>
				<string>event[&apos;hypeGestureYPosition&apos;]</string>
				<key>heading</key>
				<string>event[&apos;hypeGestureYPosition&apos;]</string>
				<key>description</key>
				<string>当使用具有“运行 JavaScript…”操作的“拖移时”事件时，返回拖移的当前 y 位置。</string>
				<key>moreInfoUrlPath</key>
				<string>#hypegestureyposition</string>
			</dict>
		</array>
	</dict>
</array>
</plist>
